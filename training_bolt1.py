# -*- coding: utf-8 -*-
"""training_bolt1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZB9fbmKPUilpdrY0NA9vNYK3xHyjW9kD
"""

!nvidia-smi

!git clone https://github.com/grboguz/Mask_RCNN

# Commented out IPython magic to ensure Python compatibility.
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd Mask_RCNN/

pip install -r requirements.txt

from training import *

dataset = "veriseti.zip"
annotations = "civata.json"

extract_images(os.path.join("veriseti.zip"),"/content/Mask_RCNN/veriseti")

train = load_image_dataset(os.path.join("civata.json"),"/content/Mask_RCNN/veriseti","train")
validation = load_image_dataset(os.path.join("civata.json"),"/content/Mask_RCNN/veriseti","validation")

print("Train Images: ", len(train.image_ids))
print("Validation Images: ", len(validation.image_ids))

display_image_samples(train)

config = CustomConfig()
model = load_training_model(config)

train_head(model, train, validation, config)

"""# Detection"""

inference_config = InferenceConfig()
#inference_config.display()

MODEL_DIR = os.path.join(ROOT_DIR, "logs")

model = modellib.MaskRCNN(mode="inference", 
                          config=inference_config,
                          model_dir=MODEL_DIR)

model_path = model.find_last()

# Load trained weights
print("Loading weights from ", model_path)
model.load_weights(model_path, by_name=True)

# Test on a random image
image_id = random.choice(validation.image_ids)
original_image, image_meta, gt_class_id, gt_bbox, gt_mask =\
    modellib.load_image_gt(validation, inference_config, 
                           image_id, use_mini_mask=False)

log("original_image", original_image)
log("image_meta", image_meta)
log("gt_class_id", gt_class_id)
log("gt_bbox", gt_bbox)
log("gt_mask", gt_mask)

visualize.display_instances(original_image, gt_bbox, gt_mask, gt_class_id, 
                            train.class_names, figsize=(8, 8))

results = model.detect([original_image], verbose=1)

r = results[0]
visualize.display_instances(original_image, r['rois'], r['masks'], r['class_ids'],
                            validation.class_names, r['scores'], ax=get_ax(), show_bbox=False)